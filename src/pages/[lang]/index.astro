---
interface Props {
  showControls?: boolean;
}
const { showControls = true } = Astro.props;

import '~/styles/styles.css';
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';
import { getLangFromUrl, useTranslations } from '~/i18n/utils';
import { css } from '../../../styled-system/css';

import TextListWithIcons from '~/components/text_list_with_icons.astro';
import SectionWithTitle from '~/components/section_with_title.astro';
import ProjectCard from '~/components/project_card.astro';
import TaskList from '~/components/task_list.astro';

import ProfilePicture from '~/assets/images/profile_picture.jpeg';
import GithubIcon from '~/assets/icons/github.svg';
import PhoneIcon from '~/assets/icons/phone.svg';
import EmailIcon from '~/assets/icons/email.svg';
import LinkedInIcon from '~/assets/icons/linkedin.svg';
import DownloadIcon from '~/assets/icons/download.svg';
import FranceFlagIcon from '~/assets/icons/france.svg';
import UsaFlagIcon from '~/assets/icons/usa.svg';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const dateFormatter = (date: Date) => {
  const dateString = new Intl.DateTimeFormat(lang, {
    month: 'long',
    year: 'numeric',
  }).format(date);

  return dateString.charAt(0).toUpperCase().concat(dateString.slice(1));
};

const filterByLang = ({ id }: { id: string }) => id.startsWith(`${lang}/`);
const skills = (await getCollection('skills')).sort((a, b) =>
  a.data.index > b.data.index ? 1 : -1,
);

const projects = await getCollection('projects', filterByLang);
const experiences = await getCollection('experiences', filterByLang);
const contributions = await getCollection('contributions', filterByLang);
const educations = await getCollection('educations', filterByLang);

export async function getStaticPaths() {
  return [{ params: { lang: 'fr' } }, { params: { lang: 'en' } }];
}

const viewStyles = css({
  backgroundColor: 'gray',
  marginX: 'auto',
  width: '21cm', // width in centimeters of a standard A4 paper sheet
});
---

<html
  lang={lang}
  class:list={[css({ overflowX: 'hidden' }), showControls ? viewStyles : '']}
>
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={t('short_description')} />
    <meta name="og:type" content="website" />
    <meta name="og:locale" content={lang} />
    <meta
      name="og:site_name"
      content={`${t('title')} | ${import.meta.env.APP_FULLNAME}`}
    />
    <meta name="theme-color" content="#335384" />
    <title>{t('title')}</title>
  </head>

  <body
    class={css({
      display: 'flex',
      flexDirection: 'row',
      height: 'screen',
      backgroundColor: 'white',
    })}
  >
    {
      showControls ? (
        <div
          class={css({
            position: 'absolute',
            display: 'flex',
            gap: 2,
            backgroundColor: 'primary',
            color: 'text-tertiary',
            right: 2,
            top: 0,
            padding: 2,
            paddingTop: 1,
            borderBottomLeftRadius: 4,
            borderBottomRightRadius: 4,
          })}
        >
          <a
            href={`https://github.com/Zuruuh/resume/releases/latest/download/${lang === 'fr' ? import.meta.env.APP_RESUME_FR_FILENAME : import.meta.env.APP_RESUME_EN_FILENAME}.pdf`}
            download
          >
            <img
              src={DownloadIcon.src}
              width={16}
              height={16}
              loading="lazy"
              alt={t('cta_download')}
            />
          </a>
          <a href={lang === 'fr' ? '/en' : '/fr'}>
            {lang === 'fr' ? (
              <img
                src={UsaFlagIcon.src}
                width={16}
                height={16}
                loading="lazy"
                alt={t('switch_lang')}
              />
            ) : (
              <img
                src={FranceFlagIcon.src}
                width={16}
                height={16}
                loading="lazy"
                alt={t('switch_lang')}
              />
            )}
          </a>
        </div>
      ) : (
        <> </>
      )
    }

    <aside
      class={css({
        width: '40%',
        backgroundColor: 'primary',
        color: 'text-tertiary',
        display: 'flex',
        flexDirection: 'column',
        padding: 2,
        justifyContent: 'start',
      })}
    >
      <h1 class={css({ fontSize: '3xl', textAlign: 'center' })}>
        {import.meta.env.APP_FULLNAME}
      </h1>
      <h2 class={css({ fontSize: 'xl', textAlign: 'center' })}>
        {t('position')}
      </h2>

      <hr class={css({ margin: 4 })} />

      <img
        src={ProfilePicture.src}
        loading="lazy"
        alt={import.meta.env.APP_FULLNAME}
        width={170}
        height={170}
        class={css({
          rounded: 'full',
          marginX: 'auto',
          objectFit: 'cover',
        })}
      />

      <section id="contact">
        <TextListWithIcons
          title={t('contact_me')}
          data={[
            {
              icon: GithubIcon,
              label: 'Zuruuh',
              alt: 'Github username',
              link: 'https://github.com/Zuruuh',
            },
            {
              icon: EmailIcon,
              alt: 'Email address',
              label: import.meta.env.APP_EMAIL,
              link: `mailto:${import.meta.env.APP_EMAIL}`,
            },
            {
              icon: PhoneIcon,
              alt: 'Phone number',
              label: import.meta.env.APP_PHONE_NUMBER,
              link: `tel:${import.meta.env.APP_PHONE_NUMBER}`,
            },
            {
              icon: LinkedInIcon,
              alt: 'LinkedIn',
              label: import.meta.env.APP_FULLNAME,
              link: import.meta.env.APP_LINKEDIN,
            },
          ]}
        />
      </section>

      <hr class={css({ margin: 2 })} />

      <section id="skills">
        <TextListWithIcons
          title={t('skills')}
          data={skills.map(({ data: skill }) => ({
            icon: skill.icon,
            alt: `${skill.name} logo`,
            label: skill.name,
          }))}
        />
      </section>
    </aside>
    <main
      class={css({
        padding: 2,
        display: 'flex',
        flexDirection: 'column',
        width: '60%',
      })}
    >
      <SectionWithTitle title={t('experiences')} id="experiences">
        <ul>
          {
            experiences.map(({ data: experience }, i, { length }) => (
              <li
                class:list={[{ [css({ paddingBottom: 2 })]: i + 1 !== length }]}
              >
                <ProjectCard
                  logo={experience.logo}
                  title={experience.name}
                  job={experience.position}
                  tasks={experience.tasks}
                  stack={experience.stack}
                />
              </li>
            ))
          }
        </ul>
      </SectionWithTitle>
      <SectionWithTitle title={t('personal_projects')} id="personal-projects">
        <ul>
          {
            projects.map(({ data: project }, i, { length }) => (
              <li
                class:list={[{ [css({ paddingBottom: 2 })]: i + 1 !== length }]}
              >
                <ProjectCard
                  title={project.title}
                  repository={project.repository}
                  tasks={project.tasks}
                  stack={project.stack}
                />
              </li>
            ))
          }
        </ul>
      </SectionWithTitle>

      <SectionWithTitle title={t('opensource')} id="opensource">
        <ul>
          {
            contributions.map(({ data: contribution }, i, { length }) => (
              <li
                class:list={[{ [css({ paddingBottom: 2 })]: i + 1 !== length }]}
              >
                <ProjectCard
                  title={contribution.name}
                  repository={contribution.repository}
                  tasks={contribution.tasks}
                  stack={contribution.stack}
                />
              </li>
            ))
          }
        </ul>
      </SectionWithTitle>

      <SectionWithTitle title={t('educations')} id="educations">
        <ul>
          {
            educations.map(({ data: education }, i, { length }) => (
              <li
                class:list={[{ [css({ paddingBottom: 2 })]: i + 1 !== length }]}
              >
                <div
                  class={css({
                    display: 'flex',
                    flexDirection: 'column',
                    marginRight: 2,
                  })}
                >
                  <div class={css({ display: 'flex' })}>
                    <Image
                      src={education.logo}
                      width={24}
                      height={24}
                      alt={education.organization}
                    />
                    <span>&nbsp;{education.organization}</span>
                  </div>
                  <div class={css({ fontSize: 'xs' })}>
                    <span>{education.label} |&nbsp;</span>
                    <span>{dateFormatter(education.start_date)}</span>
                    <span>&nbsp;-&nbsp;</span>
                    <span>
                      {education.end_date
                        ? dateFormatter(education.end_date)
                        : t('ongoing')}
                    </span>
                  </div>
                  <TaskList tasks={education.tasks} />
                </div>
              </li>
            ))
          }
        </ul>
      </SectionWithTitle>
    </main>
  </body>
</html>
