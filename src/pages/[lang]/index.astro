---
interface Props {
  showControls?: boolean;
}
const { showControls = true } = Astro.props;

import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';
import { getLangFromUrl, useTranslations } from '~/i18n/utils';

import TextListWithIcons from '~/components/text_list_with_icons.astro';
import SectionWithTitle from '~/components/section_with_title.astro';
import ProjectCard from '~/components/project_card.astro';
import TaskList from '~/components/task_list.astro';

import ProfilePicture from '~/assets/images/profile_picture.jpeg';
import GithubIcon from '~/assets/icons/github.svg';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const dateFormatter = (date: Date) => {
  const dateString = new Intl.DateTimeFormat(lang, {
    month: 'long',
    year: 'numeric',
  }).format(date);

  return dateString.charAt(0).toUpperCase().concat(dateString.slice(1));
};

const filterByLang = ({ id }: { id: string }) => id.startsWith(`${lang}/`);
const skills = (await getCollection('skills')).sort((a, b) =>
  a.data.index > b.data.index ? 1 : -1,
);

const projects = await getCollection('projects', filterByLang);
const experiences = await getCollection('experiences', filterByLang);
const contributions = await getCollection('contributions', filterByLang);
const educations = await getCollection('educations', filterByLang);

export async function getStaticPaths() {
  return [{ params: { lang: 'fr' } }, { params: { lang: 'en' } }];
}
---

<html lang={lang}>
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{t('title')}</title>
  </head>

  <body class="flex flex-col">
    <aside
      class="bg-primary text-text-tertiary flex flex-col p-8 pb-2 justify-center"
    >
      <h1 class="text-4xl text-center">Younès Ziadi</h1>
      <h2 class="text-2xl text-center">{t('position')}</h2>
      <hr class="m-4" />

      <Image
        src={ProfilePicture}
        width={ProfilePicture.width}
        height={ProfilePicture.height}
        loading="lazy"
        alt="Younès Ziadi"
        class="rounded-full"
      />

      <section id="contact">
        <TextListWithIcons
          title={t('contact_me')}
          data={[
            {
              icon: GithubIcon,
              label: 'Zuruuh',
              alt: 'Github username',
              link: 'https://github.com/Zuruuh',
            },
          ]}
        />
      </section>

      <section id="skills" class="pb-4">
        <TextListWithIcons
          title={t('skills')}
          data={skills.map(({ data: skill }) => ({
            icon: skill.icon,
            alt: `${skill.name} logo`,
            label: skill.name,
          }))}
        />
      </section>
    </aside>

    <main class="p-2 grid sm:grid-cols-2 items-baseline">
      <SectionWithTitle
        title={t('experiences')}
        id="experiences"
        withPadding={false}
      >
        <ul>
          {
            experiences.map(({ data: experience }, i, { length }) => (
              <li class:list={[{ ['pb-2']: i + 1 !== length }]}>
                <ProjectCard
                  title={experience.name}
                  job={experience.position}
                  tasks={experience.tasks}
                  stack={experience.stack}
                />
              </li>
            ))
          }
        </ul>
      </SectionWithTitle>

      <SectionWithTitle
        title={t('personnal_projects')}
        id="personnal-projects"
        class="sm:order-1"
      >
        <ul>
          {
            projects.map(({ data: project }, i, { length }) => (
              <li class:list={[{ ['pb-2']: i + 1 !== length }]}>
                <ProjectCard
                  title={project.title}
                  repository={project.repository}
                  tasks={project.tasks}
                  stack={project.stack}
                />
              </li>
            ))
          }
        </ul>
      </SectionWithTitle>

      <SectionWithTitle title={t('opensource')} id="opensource">
        <ul>
          {
            contributions.map(({ data: contribution }, i, { length }) => (
              <li class:list={[{ ['pb-2']: i + 1 !== length }]}>
                <ProjectCard
                  title={contribution.name}
                  repository={contribution.repository}
                  tasks={contribution.tasks}
                  stack={contribution.stack}
                />
              </li>
            ))
          }
        </ul>
      </SectionWithTitle>

      <SectionWithTitle title={t('educations')} id="educations">
        <ul>
          {
            educations.map(({ data: education }, i, { length }) => (
              <li class:list={[{ ['pb-2']: i + 1 !== length }]}>
                <div class="flex flex-col me-2">
                  <div class="flex">
                    <Image
                      src={education.logo}
                      width={24}
                      height={24}
                      alt={education.organization}
                    />
                    <span>&nbsp;{education.organization}</span>
                  </div>
                  <div>
                    <span>{education.label} |&nbsp;</span>
                    <span>{dateFormatter(education.start_date)}</span>
                    <span>&nbsp;-&nbsp;</span>
                    <span>
                      {education.end_date
                        ? dateFormatter(education.end_date)
                        : t('ongoing')}
                    </span>
                  </div>
                  <TaskList tasks={education.tasks} />
                </div>
              </li>
            ))
          }
        </ul>
      </SectionWithTitle>
    </main>
  </body>
</html>
